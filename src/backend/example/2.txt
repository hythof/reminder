:format html
:title オブジェクト指向

<h1>見出し</h1>
<p>オブジェクト指向言語ではクラスを定義することで自分の思い通りの「型」を作ることが出来ます。
このような自作の型は、int や double などの組込み型と区別するため、 ユーザー定義型と呼ばれています。
ユーザー定義型の理想は、組込み型とまったく同じように扱えることです。</p>
<p>ユーザー定義型をあたかも組込み型であるかのように扱えるようにするため、
C#には演算子のオーバーロードというものが用意されています。 C#の組込み型には + や -
などの演算子が用意されていますが、 演算子のオーバーロードを行うことで、
ユーザー定義型にも自分で演算子を定義することが出来、 組込み型と同じように扱うことができます。</p>
<h2>見出し2</h2>
<p>オブジェクト指向言語ではクラスを定義することで自分の思い通りの「型」を作ることが出来ます。
このような自作の型は、int や double などの組込み型と区別するため、 ユーザー定義型と呼ばれています。
ユーザー定義型の理想は、組込み型とまったく同じように扱えることです。</p>
<h2>見出し3</h2>
<p>オブジェクト指向言語ではクラスを定義することで自分の思い通りの「型」を作ることが出来ます。
このような自作の型は、int や double などの組込み型と区別するため、 ユーザー定義型と呼ばれています。
ユーザー定義型の理想は、組込み型とまったく同じように扱えることです。</p>
<h2>見出し3</h2>
<p>オブジェクト指向言語ではクラスを定義することで自分の思い通りの「型」を作ることが出来ます。
このような自作の型は、int や double などの組込み型と区別するため、 ユーザー定義型と呼ばれています。
ユーザー定義型の理想は、組込み型とまったく同じように扱えることです。</p>
<h2>見出し4</h2>
<p>オブジェクト指向言語ではクラスを定義することで自分の思い通りの「型」を作ることが出来ます。
このような自作の型は、int や double などの組込み型と区別するため、 ユーザー定義型と呼ばれています。
ユーザー定義型の理想は、組込み型とまったく同じように扱えることです。</p>
<h2>見出し2</h2>
<p>オブジェクト指向言語ではクラスを定義することで自分の思い通りの「型」を作ることが出来ます。
このような自作の型は、int や double などの組込み型と区別するため、 ユーザー定義型と呼ばれています。
ユーザー定義型の理想は、組込み型とまったく同じように扱えることです。</p>
<h2>見出し3</h2>
<p>オブジェクト指向言語ではクラスを定義することで自分の思い通りの「型」を作ることが出来ます。
このような自作の型は、int や double などの組込み型と区別するため、 ユーザー定義型と呼ばれています。
ユーザー定義型の理想は、組込み型とまったく同じように扱えることです。</p>
<h2>見出し3</h2>
<p>オブジェクト指向言語ではクラスを定義することで自分の思い通りの「型」を作ることが出来ます。
このような自作の型は、int や double などの組込み型と区別するため、 ユーザー定義型と呼ばれています。
ユーザー定義型の理想は、組込み型とまったく同じように扱えることです。</p>
<h2>見出し4</h2>
<p>オブジェクト指向言語ではクラスを定義することで自分の思い通りの「型」を作ることが出来ます。
このような自作の型は、int や double などの組込み型と区別するため、 ユーザー定義型と呼ばれています。
ユーザー定義型の理想は、組込み型とまったく同じように扱えることです。</p>
